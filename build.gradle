plugins {
    id 'java'
}

repositories {
    mavenCentral()      // default repository for fetching dependencies
}

ext.graalVersion = "20.0.0"             // Graal version used in this project
ext.compilerDir = "$buildDir/compiler"  // stores the runtime compiler jar files

configurations {
    // Separate configuration for Graal runtime compiler so that we don't pollute the main class path with dependencies.
    graalCompiler
}

dependencies {
    implementation "org.graalvm.sdk:graal-sdk:$graalVersion"
    implementation "org.graalvm.js:js:$graalVersion"
    // necessary to integrate with legacy ScriptEngine based implementation
    implementation "org.graalvm.js:js-scriptengine:$graalVersion"

    graalCompiler "org.graalvm.compiler:compiler:$graalVersion"

    testImplementation 'junit:junit:4.12'
}

/* Task for running the main class with graal runtime compiler (if enabled). */
task run(type: JavaExec) {
    main = 'com.mycompany.app.App'
    classpath = sourceSets.main.runtimeClasspath
    if (System.getProperty("graal", "on") == "on") {    // When Graal is enabled, setup runtime compiler
        jvmArgs '-XX:+UnlockExperimentalVMOptions',
                '-XX:+EnableJVMCI',
                "--module-path=$compilerDir",
                "--upgrade-module-path=$compilerDir/compiler-${graalVersion}.jar"
    }
}

/* Copy Graal runtime compiler .jar files to $compilerDir. */
task copyGraalCompiler(type: Copy) {
    into compilerDir
    from configurations.getByName('graalCompiler').files
}

/* Make sure compiler is available when running the application. */
run.dependsOn(copyGraalCompiler)